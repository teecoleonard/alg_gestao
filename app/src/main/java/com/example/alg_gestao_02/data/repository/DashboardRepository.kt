package com.example.alg_gestao_02.data.repository

import com.example.alg_gestao_02.data.api.ApiClient
import com.example.alg_gestao_02.data.models.DashboardStats
import com.example.alg_gestao_02.data.models.FinancialMetrics
import com.example.alg_gestao_02.data.models.ProgressMetrics
import com.example.alg_gestao_02.data.models.TaskMetrics
import com.example.alg_gestao_02.data.models.ReceitaClienteResponse
import com.example.alg_gestao_02.data.models.ResumoMensalCliente
import com.example.alg_gestao_02.data.models.ConfirmarPagamentoRequest
import com.example.alg_gestao_02.data.models.ConfirmarPagamentoResponse
import com.example.alg_gestao_02.data.models.GerarPdfResumoRequest
import com.example.alg_gestao_02.data.models.PdfResumoResponse
import com.example.alg_gestao_02.utils.LogUtils
import com.example.alg_gestao_02.utils.SessionManager
import kotlinx.coroutines.delay

/**
 * Reposit√≥rio para gerenciar dados de estat√≠sticas do dashboard
 */
class DashboardRepository {

    private val apiService = ApiClient.apiService

    /**
     * Busca estat√≠sticas do dashboard
     * @return DashboardStats com contadores de contratos, clientes, equipamentos e devolu√ß√µes
     */
    suspend fun getDashboardStats(): DashboardStats {
        LogUtils.info("DashboardRepository", "üîÑ ========== INICIANDO BUSCA DE ESTAT√çSTICAS ==========")
        
        val startTime = System.currentTimeMillis()
        
        try {
            // Log de debug sobre a URL que ser√° chamada
            LogUtils.debug("DashboardRepository", "üì° URL Base: ${ApiClient.getBaseUrl()}")
            LogUtils.debug("DashboardRepository", "üì° Endpoint completo: ${ApiClient.getBaseUrl()}api/dashboard/stats")
            
            // Log de headers e autentica√ß√£o
            LogUtils.debug("DashboardRepository", "üîê Verificando autentica√ß√£o...")
            
            LogUtils.info("DashboardRepository", "üìû Fazendo requisi√ß√£o para API...")
            val response = apiService.getDashboardStats()
            
            val requestTime = System.currentTimeMillis() - startTime
            LogUtils.info("DashboardRepository", "‚è±Ô∏è Tempo de resposta: ${requestTime}ms")
            
            LogUtils.debug("DashboardRepository", "üìã Status da resposta: ${response.code()} - ${response.message()}")
            LogUtils.debug("DashboardRepository", "üìä Headers da resposta: ${response.headers()}")
            
            if (response.isSuccessful) {
                val stats = response.body()
                if (stats != null) {
                    LogUtils.info("DashboardRepository", "‚úÖ ========== ESTAT√çSTICAS OBTIDAS COM SUCESSO ==========")
                    LogUtils.info("DashboardRepository", "üìä DADOS B√ÅSICOS:")
                    LogUtils.info("DashboardRepository", "   üìã Contratos: ${stats.contratos}")
                    LogUtils.info("DashboardRepository", "   üë• Clientes: ${stats.clientes}")
                    LogUtils.info("DashboardRepository", "   ‚öôÔ∏è Equipamentos: ${stats.equipamentos}")
                    LogUtils.info("DashboardRepository", "   üì¶ Devolu√ß√µes: ${stats.devolucoes}")
                    
                    // Logs das novas estat√≠sticas expandidas
                    LogUtils.info("DashboardRepository", "üìà ESTAT√çSTICAS DETALHADAS:")
                    LogUtils.info("DashboardRepository", "   üìã Contratos esta semana: ${stats.contratosEstaSemana}")
                    LogUtils.info("DashboardRepository", "   üë• Clientes hoje: ${stats.clientesHoje}")
                    LogUtils.info("DashboardRepository", "   ‚öôÔ∏è Equipamentos dispon√≠veis: ${stats.equipamentosDisponiveis}")
                    LogUtils.info("DashboardRepository", "   üì¶ Devolu√ß√µes pendentes: ${stats.devolucoesPendentes}")
                    
                    // Log das atividades recentes
                    if (stats.atividadesRecentes.isNotEmpty()) {
                        LogUtils.info("DashboardRepository", "üéØ ATIVIDADES RECENTES (${stats.atividadesRecentes.size} itens):")
                        stats.atividadesRecentes.forEachIndexed { index, atividade ->
                            LogUtils.info("DashboardRepository", "   ${index + 1}. [${atividade.tipo.uppercase()}] ${atividade.titulo}")
                            LogUtils.debug("DashboardRepository", "      Descri√ß√£o: ${atividade.descricao}")
                            LogUtils.debug("DashboardRepository", "      Tempo: ${atividade.tempoRelativo}")
                        }
                    } else {
                        LogUtils.warning("DashboardRepository", "‚ö†Ô∏è Nenhuma atividade recente encontrada")
                    }
                    
                    LogUtils.info("DashboardRepository", "‚úÖ ========== PROCESSAMENTO CONCLU√çDO ==========")
                    return stats
                } else {
                    LogUtils.error("DashboardRepository", "‚ùå ERRO: Resposta da API √© nula!")
                    LogUtils.error("DashboardRepository", "üìã Response body: null")
                    LogUtils.error("DashboardRepository", "üìã Response code: ${response.code()}")
                    LogUtils.error("DashboardRepository", "üìã Response headers: ${response.headers()}")
                    throw Exception("Resposta da API √© nula")
                }
            } else {
                LogUtils.error("DashboardRepository", "‚ùå ========== ERRO NA API ==========")
                LogUtils.error("DashboardRepository", "üìã Status Code: ${response.code()}")
                LogUtils.error("DashboardRepository", "üìã Status Message: ${response.message()}")
                LogUtils.error("DashboardRepository", "üìã Response Headers: ${response.headers()}")
                
                // Tentar ler o corpo da resposta de erro
                try {
                    val errorBody = response.errorBody()?.string()
                    if (!errorBody.isNullOrEmpty()) {
                        LogUtils.error("DashboardRepository", "üìã Error Body: $errorBody")
                    }
                } catch (e: Exception) {
                    LogUtils.error("DashboardRepository", "üìã Erro ao ler error body: ${e.message}")
                }
                
                throw Exception("Erro HTTP ${response.code()}: ${response.message()}")
            }
        } catch (e: Exception) {
            val totalTime = System.currentTimeMillis() - startTime
            LogUtils.error("DashboardRepository", "‚ùå ========== ERRO AO BUSCAR ESTAT√çSTICAS ==========")
            LogUtils.error("DashboardRepository", "‚è±Ô∏è Tempo total: ${totalTime}ms")
            LogUtils.error("DashboardRepository", "üîç Tipo do erro: ${e.javaClass.simpleName}")
            LogUtils.error("DashboardRepository", "üìù Mensagem: ${e.message}")
            LogUtils.error("DashboardRepository", "üìö Stack trace:", e)
            
            // Log de debug adicional para problemas de rede
            when (e) {
                is java.net.UnknownHostException -> {
                    LogUtils.error("DashboardRepository", "üåê PROBLEMA DE REDE: Host n√£o encontrado")
                    LogUtils.error("DashboardRepository", "üí° Verifique sua conex√£o com a internet")
                }
                is java.net.ConnectException -> {
                    LogUtils.error("DashboardRepository", "üîå PROBLEMA DE CONEX√ÉO: N√£o foi poss√≠vel conectar ao servidor")
                    LogUtils.error("DashboardRepository", "üí° Verifique se a API est√° rodando em: ${ApiClient.BASE_URL}")
                }
                is java.net.SocketTimeoutException -> {
                    LogUtils.error("DashboardRepository", "‚è∞ TIMEOUT: A requisi√ß√£o demorou muito para responder")
                    LogUtils.error("DashboardRepository", "üí° Verifique a performance da API")
                }
            }
            
            throw e
        }
    }

    /**
     * Busca m√©tricas financeiras do dashboard
     * @return FinancialMetrics com dados financeiros do sistema
     */
    suspend fun getFinancialMetrics(): FinancialMetrics {
        LogUtils.info("DashboardRepository", "üí∞ ========== INICIANDO BUSCA DE M√âTRICAS FINANCEIRAS ==========")
        
        val startTime = System.currentTimeMillis()
        
        try {
            LogUtils.debug("DashboardRepository", "üì° Endpoint: ${ApiClient.getBaseUrl()}api/dashboard/financial-metrics")
            
            LogUtils.info("DashboardRepository", "üìû Fazendo requisi√ß√£o para m√©tricas financeiras...")
            val response = apiService.getFinancialMetrics()
            
            val requestTime = System.currentTimeMillis() - startTime
            LogUtils.info("DashboardRepository", "‚è±Ô∏è Tempo de resposta: ${requestTime}ms")
            
            if (response.isSuccessful) {
                val metrics = response.body()
                if (metrics != null) {
                    LogUtils.info("DashboardRepository", "‚úÖ ========== M√âTRICAS FINANCEIRAS OBTIDAS ==========")
                    LogUtils.info("DashboardRepository", "üí∞ Valor Total Ativo: R$ ${String.format("%.2f", metrics.valorTotalAtivo)}")
                    LogUtils.info("DashboardRepository", "üìà Receita Mensal: R$ ${String.format("%.2f", metrics.receitaMensal)}")
                    LogUtils.info("DashboardRepository", "üéØ Ticket M√©dio: R$ ${String.format("%.2f", metrics.ticketMedio)}")
                    
                    return metrics
                } else {
                    LogUtils.error("DashboardRepository", "‚ùå ERRO: Resposta das m√©tricas financeiras √© nula!")
                    throw Exception("Resposta das m√©tricas financeiras √© nula")
                }
            } else {
                LogUtils.error("DashboardRepository", "‚ùå Erro HTTP ${response.code()}: ${response.message()}")
                throw Exception("Erro HTTP ${response.code()}: ${response.message()}")
            }
        } catch (e: Exception) {
            val totalTime = System.currentTimeMillis() - startTime
            LogUtils.error("DashboardRepository", "‚ùå ========== ERRO AO BUSCAR M√âTRICAS FINANCEIRAS ==========")
            LogUtils.error("DashboardRepository", "‚è±Ô∏è Tempo total: ${totalTime}ms")
            LogUtils.error("DashboardRepository", "üìù Mensagem: ${e.message}")
            
            throw e
        }
    }

    /**
     * Busca m√©tricas de progresso/metas do dashboard
     * @return ProgressMetrics com dados de metas e progresso
     */
    suspend fun getProgressMetrics(): ProgressMetrics {
        LogUtils.info("DashboardRepository", "üìä ========== INICIANDO BUSCA DE M√âTRICAS DE PROGRESSO ==========")
        
        val startTime = System.currentTimeMillis()
        
        try {
            LogUtils.debug("DashboardRepository", "üì° Endpoint: ${ApiClient.getBaseUrl()}api/dashboard/progress-metrics")
            
            LogUtils.info("DashboardRepository", "üìû Fazendo requisi√ß√£o para m√©tricas de progresso...")
            val response = apiService.getProgressMetrics()
            
            val requestTime = System.currentTimeMillis() - startTime
            LogUtils.info("DashboardRepository", "‚è±Ô∏è Tempo de resposta: ${requestTime}ms")
            
            if (response.isSuccessful) {
                val metrics = response.body()
                if (metrics != null) {
                    LogUtils.info("DashboardRepository", "‚úÖ ========== M√âTRICAS DE PROGRESSO OBTIDAS ==========")
                    LogUtils.info("DashboardRepository", "üìä Contratos: ${metrics.contratosAtual}/${metrics.contratosMeta} (${metrics.contratosPercentual}%)")
                    LogUtils.info("DashboardRepository", "üí∞ Receita: R$ ${String.format("%.2f", metrics.receitaAtual)}/R$ ${String.format("%.2f", metrics.receitaMeta)} (${metrics.receitaPercentual}%)")
                    LogUtils.info("DashboardRepository", "üë• Clientes: ${metrics.clientesAtual}/${metrics.clientesMeta} (${metrics.clientesPercentual}%)")
                    LogUtils.info("DashboardRepository", "üòä Satisfa√ß√£o: ${metrics.satisfacaoPercentual}%")
                    
                    return metrics
                } else {
                    LogUtils.error("DashboardRepository", "‚ùå ERRO: Resposta das m√©tricas de progresso √© nula!")
                    throw Exception("Resposta das m√©tricas de progresso √© nula")
                }
            } else {
                LogUtils.error("DashboardRepository", "‚ùå Erro HTTP ${response.code()}: ${response.message()}")
                throw Exception("Erro HTTP ${response.code()}: ${response.message()}")
            }
        } catch (e: Exception) {
            val totalTime = System.currentTimeMillis() - startTime
            LogUtils.error("DashboardRepository", "‚ùå ========== ERRO AO BUSCAR M√âTRICAS DE PROGRESSO ==========")
            LogUtils.error("DashboardRepository", "‚è±Ô∏è Tempo total: ${totalTime}ms")
            LogUtils.error("DashboardRepository", "üìù Mensagem: ${e.message}")
            
            throw e
        }
    }

    /**
     * Busca m√©tricas de tarefas pendentes do dashboard
     * @return TaskMetrics com dados de tarefas pendentes
     */
    suspend fun getTaskMetrics(): TaskMetrics {
        LogUtils.info("DashboardRepository", "üìã ========== INICIANDO BUSCA DE TAREFAS PENDENTES ==========")
        
        val startTime = System.currentTimeMillis()
        
        try {
            LogUtils.debug("DashboardRepository", "üì° Endpoint: ${ApiClient.getBaseUrl()}api/dashboard/task-metrics")
            
            LogUtils.info("DashboardRepository", "üìû Fazendo requisi√ß√£o para tarefas pendentes...")
            val response = apiService.getTaskMetrics()
            
            val requestTime = System.currentTimeMillis() - startTime
            LogUtils.info("DashboardRepository", "‚è±Ô∏è Tempo de resposta: ${requestTime}ms")
            
            if (response.isSuccessful) {
                val metrics = response.body()
                if (metrics != null) {
                    LogUtils.info("DashboardRepository", "‚úÖ ========== TAREFAS PENDENTES OBTIDAS ==========")
                    LogUtils.info("DashboardRepository", "üìã Contratos aguardando assinatura: ${metrics.contratosAguardandoAssinatura}")
                    LogUtils.info("DashboardRepository", "üì¶ Devolu√ß√µes em atraso: ${metrics.devolucoesEmAtraso}")
                    LogUtils.info("DashboardRepository", "‚öôÔ∏è Equipamentos para manuten√ß√£o: ${metrics.equipamentosManutencao}")
                    LogUtils.info("DashboardRepository", "üìä Total de tarefas: ${metrics.totalTarefas}")
                    
                    return metrics
                } else {
                    LogUtils.error("DashboardRepository", "‚ùå ERRO: Resposta das tarefas pendentes √© nula!")
                    throw Exception("Resposta das tarefas pendentes √© nula")
                }
            } else {
                LogUtils.error("DashboardRepository", "‚ùå Erro HTTP ${response.code()}: ${response.message()}")
                throw Exception("Erro HTTP ${response.code()}: ${response.message()}")
            }
        } catch (e: Exception) {
            val totalTime = System.currentTimeMillis() - startTime
            LogUtils.error("DashboardRepository", "‚ùå ========== ERRO AO BUSCAR TAREFAS PENDENTES ==========")
            LogUtils.error("DashboardRepository", "‚è±Ô∏è Tempo total: ${totalTime}ms")
            LogUtils.error("DashboardRepository", "üìù Mensagem: ${e.message}")
            
            throw e
        }
    }

    /**
     * Busca receita mensal por cliente
     * @return ReceitaClienteResponse com lista de receita por cliente
     */
    suspend fun getReceitaPorCliente(): ReceitaClienteResponse {
        LogUtils.info("DashboardRepository", "üí∞ ========== INICIANDO BUSCA DE RECEITA POR CLIENTE ==========")
        
        val startTime = System.currentTimeMillis()
        
        try {
            LogUtils.debug("DashboardRepository", "üì° Endpoint: ${ApiClient.getBaseUrl()}api/dashboard/receita-por-cliente")
            
            LogUtils.info("DashboardRepository", "üìû Fazendo requisi√ß√£o para receita por cliente...")
            val response = apiService.getReceitaPorCliente()
            
            val requestTime = System.currentTimeMillis() - startTime
            LogUtils.info("DashboardRepository", "‚è±Ô∏è Tempo de resposta: ${requestTime}ms")
            
            if (response.isSuccessful) {
                val receitaResponse = response.body()
                if (receitaResponse != null) {
                    LogUtils.info("DashboardRepository", "‚úÖ ========== RECEITA POR CLIENTE OBTIDA ==========")
                    LogUtils.info("DashboardRepository", "üë• Total de clientes: ${receitaResponse.totalClientes}")
                    LogUtils.info("DashboardRepository", "üí∞ Total geral: R$ ${String.format("%.2f", receitaResponse.totalGeral)}")
                    
                    // Log dos top 5 clientes por receita
                    val topClientes = receitaResponse.clientes.take(5)
                    LogUtils.info("DashboardRepository", "üèÜ TOP 5 CLIENTES POR RECEITA:")
                    topClientes.forEachIndexed { index, cliente ->
                        LogUtils.info("DashboardRepository", "   ${index + 1}. ${cliente.clienteNome}: ${cliente.getValorMensalFormatado()}")
                    }
                    
                    return receitaResponse
                } else {
                    LogUtils.error("DashboardRepository", "‚ùå ERRO: Resposta da receita por cliente √© nula!")
                    throw Exception("Resposta da receita por cliente √© nula")
                }
            } else {
                LogUtils.error("DashboardRepository", "‚ùå Erro HTTP ${response.code()}: ${response.message()}")
                throw Exception("Erro HTTP ${response.code()}: ${response.message()}")
            }
        } catch (e: Exception) {
            val totalTime = System.currentTimeMillis() - startTime
            LogUtils.error("DashboardRepository", "‚ùå ========== ERRO AO BUSCAR RECEITA POR CLIENTE ==========")
            LogUtils.error("DashboardRepository", "‚è±Ô∏è Tempo total: ${totalTime}ms")
            LogUtils.error("DashboardRepository", "üìù Mensagem: ${e.message}")
            
            throw e
        }
    }

    /**
     * Busca resumo mensal detalhado de um cliente espec√≠fico
     * @param clienteId ID do cliente
     * @param mesReferencia M√™s de refer√™ncia (formato: yyyy-MM)
     * @return ResumoMensalCliente com dados detalhados
     */
    suspend fun getResumoMensalCliente(clienteId: Int, mesReferencia: String): ResumoMensalCliente {
        LogUtils.info("DashboardRepository", "üìä ========== INICIANDO BUSCA DE RESUMO MENSAL ==========")
        LogUtils.info("DashboardRepository", "üë§ Cliente ID: $clienteId")
        LogUtils.info("DashboardRepository", "üìÖ M√™s: $mesReferencia")
        
        val startTime = System.currentTimeMillis()
        
        try {
            LogUtils.debug("DashboardRepository", "üì° Endpoint: ${ApiClient.getBaseUrl()}api/dashboard/resumo-mensal-cliente/$clienteId?mes=$mesReferencia")
            
            val response = apiService.getResumoMensalCliente(clienteId, mesReferencia)
            
            val requestTime = System.currentTimeMillis() - startTime
            LogUtils.info("DashboardRepository", "‚è±Ô∏è Tempo de resposta: ${requestTime}ms")
            
            if (response.isSuccessful) {
                val resumo = response.body()
                if (resumo != null) {
                    LogUtils.info("DashboardRepository", "‚úÖ ========== RESUMO MENSAL OBTIDO ==========")
                    LogUtils.info("DashboardRepository", "üë§ Cliente: ${resumo.clienteNome}")
                    LogUtils.info("DashboardRepository", "üí∞ Valor mensal: ${resumo.getValorMensalFormatado()}")
                    LogUtils.info("DashboardRepository", "üí≥ Status pagamento: ${resumo.statusPagamento}")
                    LogUtils.info("DashboardRepository", "üìã Contratos ativos: ${resumo.contratosAtivos}")
                    LogUtils.info("DashboardRepository", "üì¶ Devolu√ß√µes no m√™s: ${resumo.devolucoesMes}")
                    
                    return resumo
                } else {
                    LogUtils.error("DashboardRepository", "‚ùå ERRO: Resposta do resumo mensal √© nula!")
                    throw Exception("Resposta do resumo mensal √© nula")
                }
            } else {
                LogUtils.error("DashboardRepository", "‚ùå Erro HTTP ${response.code()}: ${response.message()}")
                throw Exception("Erro HTTP ${response.code()}: ${response.message()}")
            }
        } catch (e: Exception) {
            val totalTime = System.currentTimeMillis() - startTime
            LogUtils.error("DashboardRepository", "‚ùå ========== ERRO AO BUSCAR RESUMO MENSAL ==========")
            LogUtils.error("DashboardRepository", "‚è±Ô∏è Tempo total: ${totalTime}ms")
            LogUtils.error("DashboardRepository", "üìù Mensagem: ${e.message}")
            
            throw e
        }
    }

    /**
     * Confirma pagamento de um cliente
     * @param request Dados da confirma√ß√£o de pagamento
     * @return ConfirmarPagamentoResponse com resultado da opera√ß√£o
     */
    suspend fun confirmarPagamento(request: ConfirmarPagamentoRequest): ConfirmarPagamentoResponse {
        LogUtils.info("DashboardRepository", "üí≥ ========== CONFIRMANDO PAGAMENTO ==========")
        LogUtils.info("DashboardRepository", "üë§ Cliente ID: ${request.clienteId}")
        LogUtils.info("DashboardRepository", "üìÖ M√™s: ${request.mesReferencia}")
        LogUtils.info("DashboardRepository", "üí∞ Valor: R$ ${String.format("%.2f", request.valorPago)}")
        
        val startTime = System.currentTimeMillis()
        
        try {
            LogUtils.debug("DashboardRepository", "üì° Endpoint: ${ApiClient.getBaseUrl()}api/dashboard/confirmar-pagamento")
            
            val response = apiService.confirmarPagamento(request)
            
            val requestTime = System.currentTimeMillis() - startTime
            LogUtils.info("DashboardRepository", "‚è±Ô∏è Tempo de resposta: ${requestTime}ms")
            
            if (response.isSuccessful) {
                val confirmacao = response.body()
                if (confirmacao != null) {
                    LogUtils.info("DashboardRepository", "‚úÖ ========== PAGAMENTO CONFIRMADO ==========")
                    LogUtils.info("DashboardRepository", "‚úÖ Sucesso: ${confirmacao.sucesso}")
                    LogUtils.info("DashboardRepository", "üìù Mensagem: ${confirmacao.mensagem}")
                    
                    return confirmacao
                } else {
                    LogUtils.error("DashboardRepository", "‚ùå ERRO: Resposta da confirma√ß√£o √© nula!")
                    throw Exception("Resposta da confirma√ß√£o √© nula")
                }
            } else {
                LogUtils.error("DashboardRepository", "‚ùå Erro HTTP ${response.code()}: ${response.message()}")
                throw Exception("Erro HTTP ${response.code()}: ${response.message()}")
            }
        } catch (e: Exception) {
            val totalTime = System.currentTimeMillis() - startTime
            LogUtils.error("DashboardRepository", "‚ùå ========== ERRO AO CONFIRMAR PAGAMENTO ==========")
            LogUtils.error("DashboardRepository", "‚è±Ô∏è Tempo total: ${totalTime}ms")
            LogUtils.error("DashboardRepository", "üìù Mensagem: ${e.message}")
            
            throw e
        }
    }

    /**
     * Gera PDF de resumo mensal
     * @param request Par√¢metros para gera√ß√£o do PDF
     * @return PdfResumoResponse com informa√ß√µes do PDF gerado
     */
    suspend fun gerarPdfResumoMensal(request: GerarPdfResumoRequest): PdfResumoResponse {
        LogUtils.info("DashboardRepository", "üìÑ ========== GERANDO PDF RESUMO MENSAL ==========")
        LogUtils.info("DashboardRepository", "üìÖ M√™s: ${request.mesReferencia}")
        LogUtils.info("DashboardRepository", "üë• Clientes: ${request.clienteIds?.size ?: "todos"}")
        LogUtils.info("DashboardRepository", "üìã Tipo: ${request.tipoRelatorio}")
        
        val startTime = System.currentTimeMillis()
        
        try {
            LogUtils.debug("DashboardRepository", "üì° Endpoint: ${ApiClient.getBaseUrl()}api/dashboard/gerar-pdf-resumo-mensal")
            
            val response = apiService.gerarPdfResumoMensal(request)
            
            val requestTime = System.currentTimeMillis() - startTime
            LogUtils.info("DashboardRepository", "‚è±Ô∏è Tempo de resposta: ${requestTime}ms")
            
            if (response.isSuccessful) {
                val pdfResponse = response.body()
                if (pdfResponse != null) {
                    LogUtils.info("DashboardRepository", "‚úÖ ========== PDF GERADO COM SUCESSO ==========")
                    LogUtils.info("DashboardRepository", "üìÑ Arquivo: ${pdfResponse.nomeArquivo}")
                    LogUtils.info("DashboardRepository", "üíæ Tamanho: ${pdfResponse.tamanhoArquivo} bytes")
                    LogUtils.info("DashboardRepository", "üîó URL: ${pdfResponse.urlDownload}")
                    
                    return pdfResponse
                } else {
                    LogUtils.error("DashboardRepository", "‚ùå ERRO: Resposta da gera√ß√£o de PDF √© nula!")
                    throw Exception("Resposta da gera√ß√£o de PDF √© nula")
                }
            } else {
                LogUtils.error("DashboardRepository", "‚ùå Erro HTTP ${response.code()}: ${response.message()}")
                throw Exception("Erro HTTP ${response.code()}: ${response.message()}")
            }
        } catch (e: Exception) {
            val totalTime = System.currentTimeMillis() - startTime
            LogUtils.error("DashboardRepository", "‚ùå ========== ERRO AO GERAR PDF ==========")
            LogUtils.error("DashboardRepository", "‚è±Ô∏è Tempo total: ${totalTime}ms")
            LogUtils.error("DashboardRepository", "üìù Mensagem: ${e.message}")
            
            throw e
        }
    }
} 