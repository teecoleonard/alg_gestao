package com.example.alg_gestao_02.data.api

import com.example.alg_gestao_02.utils.SessionManager
import com.example.alg_gestao_02.utils.LogUtils
import okhttp3.Interceptor
import okhttp3.Response

/**
 * Interceptor que adiciona o token de autentica√ß√£o em todas as requisi√ß√µes
 */
class AuthInterceptor(private val sessionManager: SessionManager) : Interceptor {
    
    override fun intercept(chain: Interceptor.Chain): Response {
        val originalRequest = chain.request()
        
        // Log para requisi√ß√µes de devolu√ß√£o
        if (originalRequest.url.toString().contains("/devolucoes") && originalRequest.method == "PUT") {
            LogUtils.debug("AuthInterceptor", "Interceptando requisi√ß√£o PUT para devolu√ß√£o: ${originalRequest.url}")
        }
        
        // Log para requisi√ß√µes de dashboard
        if (originalRequest.url.toString().contains("/dashboard")) {
            LogUtils.info("AuthInterceptor", "üîç ========== INTERCEPTANDO DASHBOARD ==========")
            LogUtils.info("AuthInterceptor", "üåê URL: ${originalRequest.url}")
            LogUtils.info("AuthInterceptor", "üì° M√©todo: ${originalRequest.method}")
        }
        
        // N√£o adiciona token para endpoints de autentica√ß√£o
        if (originalRequest.url.encodedPath.contains("/login") || 
            originalRequest.url.encodedPath.contains("/register")) {
            LogUtils.debug("AuthInterceptor", "Endpoint de autentica√ß√£o detectado, n√£o adicionando token")
            return chain.proceed(originalRequest)
        }
        
        // Obt√©m o token de autentica√ß√£o
        val token = sessionManager.getToken()
        
        // Log detalhado para dashboard
        if (originalRequest.url.toString().contains("/dashboard")) {
            LogUtils.info("AuthInterceptor", "üîç Verificando estado da sess√£o:")
            LogUtils.info("AuthInterceptor", "üìã isLoggedIn: ${sessionManager.isLoggedIn()}")
            LogUtils.info("AuthInterceptor", "üë§ User ID: ${sessionManager.getUserId()}")
            
            if (token.isNullOrEmpty()) {
                LogUtils.error("AuthInterceptor", "‚ùå TOKEN N√ÉO DISPON√çVEL para requisi√ß√£o de dashboard!")
                LogUtils.error("AuthInterceptor", "üö® PROBLEMA: Interceptor n√£o conseguiu obter token!")
            } else {
                LogUtils.info("AuthInterceptor", "‚úÖ Token dispon√≠vel para dashboard (${token.take(30)}...)")
                LogUtils.info("AuthInterceptor", "üìè Tamanho do token: ${token.length} caracteres")
            }
        }
        
        // Log para requisi√ß√µes de devolu√ß√£o
        if (originalRequest.url.toString().contains("/devolucoes") && originalRequest.method == "PUT") {
            if (token.isNullOrEmpty()) {
                LogUtils.error("AuthInterceptor", "‚ùå TOKEN N√ÉO DISPON√çVEL para requisi√ß√£o de devolu√ß√£o!")
            } else {
                LogUtils.debug("AuthInterceptor", "‚úÖ Token dispon√≠vel para devolu√ß√£o (${token.take(10)}...)")
            }
        }
        
        // Se n√£o houver token, prossegue com a requisi√ß√£o original
        if (token.isNullOrEmpty()) {
            if (originalRequest.url.toString().contains("/dashboard")) {
                LogUtils.error("AuthInterceptor", "‚ö†Ô∏è Enviando requisi√ß√£o SEM TOKEN para dashboard!")
                LogUtils.info("AuthInterceptor", "üîç ==========================================")
            }
            return chain.proceed(originalRequest)
        }
        
        // Adiciona o token no cabe√ßalho da requisi√ß√£o
        val requestWithToken = originalRequest.newBuilder()
            .header("Authorization", "Bearer $token")
            .build()
            
        // Log para dashboard
        if (originalRequest.url.toString().contains("/dashboard")) {
            LogUtils.info("AuthInterceptor", "üì§ Token adicionado ao header Authorization")
            LogUtils.info("AuthInterceptor", "üîê Header: Bearer ${token.take(30)}...")
            LogUtils.info("AuthInterceptor", "üîç ==========================================")
        }
            
        return chain.proceed(requestWithToken)
    }
} 