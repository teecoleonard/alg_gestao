package com.example.alg_gestao_02.dashboard.fragments.viewmodel

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.alg_gestao_02.data.models.DashboardStats
import com.example.alg_gestao_02.data.repository.DashboardRepository
import com.example.alg_gestao_02.ui.state.UiState
import com.example.alg_gestao_02.utils.LogUtils
import kotlinx.coroutines.launch

/**
 * ViewModel para o Dashboard principal da aplica√ß√£o
 * Gerencia o estado da UI e o carregamento de dados do Dashboard
 */
class DashboardViewModel(private val repository: DashboardRepository = DashboardRepository()) : ViewModel() {
    
    // LiveData para o estado da UI
    private val _uiState = MutableLiveData<UiState<DashboardStats>>()
    val uiState: LiveData<UiState<DashboardStats>> = _uiState
    
    // LiveData para as estat√≠sticas do dashboard
    private val _dashboardStats = MutableLiveData<DashboardStats>()
    val dashboardStats: LiveData<DashboardStats> = _dashboardStats
    
    init {
        LogUtils.info("DashboardViewModel", "üöÄ ========== INICIALIZANDO DASHBOARD VIEWMODEL ==========")
        LogUtils.debug("DashboardViewModel", "üìã Repository: ${repository.javaClass.simpleName}")
        LogUtils.debug("DashboardViewModel", "üìä LiveData configurado")
        LogUtils.debug("DashboardViewModel", "üîÑ Iniciando carregamento autom√°tico...")
        loadDashboardStats()
    }
    
    /**
     * Carrega as estat√≠sticas do dashboard
     */
    private fun loadDashboardStats() {
        LogUtils.info("DashboardViewModel", "üì• ========== CARREGANDO ESTAT√çSTICAS DO DASHBOARD ==========")
        LogUtils.debug("DashboardViewModel", "‚è≥ Definindo estado como Loading...")
        
        _uiState.value = UiState.Loading()
        
        viewModelScope.launch {
            try {
                LogUtils.info("DashboardViewModel", "üîÑ Chamando repository para buscar dados...")
                val startTime = System.currentTimeMillis()
                
                val stats = repository.getDashboardStats()
                
                val loadTime = System.currentTimeMillis() - startTime
                LogUtils.info("DashboardViewModel", "‚è±Ô∏è Tempo total de carregamento: ${loadTime}ms")
                
                LogUtils.info("DashboardViewModel", "‚úÖ Dados recebidos com sucesso!")
                LogUtils.debug("DashboardViewModel", "üìä Estat√≠sticas carregadas:")
                LogUtils.debug("DashboardViewModel", "   üìã Contratos: ${stats.contratos}")
                LogUtils.debug("DashboardViewModel", "   üë• Clientes: ${stats.clientes}")
                LogUtils.debug("DashboardViewModel", "   ‚öôÔ∏è Equipamentos: ${stats.equipamentos}")
                LogUtils.debug("DashboardViewModel", "   üì¶ Devolu√ß√µes: ${stats.devolucoes}")
                
                // Log das estat√≠sticas expandidas
                if (stats.contratosEstaSemana > 0 || stats.clientesHoje > 0 || 
                    stats.equipamentosDisponiveis > 0 || stats.devolucoesPendentes > 0) {
                    LogUtils.info("DashboardViewModel", "üìà Estat√≠sticas expandidas dispon√≠veis:")
                    LogUtils.debug("DashboardViewModel", "   üìã Contratos esta semana: ${stats.contratosEstaSemana}")
                    LogUtils.debug("DashboardViewModel", "   üë• Clientes hoje: ${stats.clientesHoje}")
                    LogUtils.debug("DashboardViewModel", "   ‚öôÔ∏è Equipamentos dispon√≠veis: ${stats.equipamentosDisponiveis}")
                    LogUtils.debug("DashboardViewModel", "   üì¶ Devolu√ß√µes pendentes: ${stats.devolucoesPendentes}")
                } else {
                    LogUtils.warning("DashboardViewModel", "‚ö†Ô∏è Estat√≠sticas expandidas n√£o dispon√≠veis ou zeradas")
                }
                
                // Log das atividades recentes
                if (stats.atividadesRecentes.isNotEmpty()) {
                    LogUtils.info("DashboardViewModel", "üéØ ${stats.atividadesRecentes.size} atividades recentes recebidas")
                } else {
                    LogUtils.warning("DashboardViewModel", "‚ö†Ô∏è Nenhuma atividade recente recebida")
                }
                
                LogUtils.debug("DashboardViewModel", "üì§ Atualizando LiveData com novos dados...")
                _dashboardStats.value = stats
                _uiState.value = UiState.Success(stats)
                
                LogUtils.info("DashboardViewModel", "‚úÖ ========== CARREGAMENTO CONCLU√çDO COM SUCESSO ==========")
                
            } catch (e: Exception) {
                LogUtils.error("DashboardViewModel", "‚ùå ========== ERRO NO CARREGAMENTO ==========")
                LogUtils.error("DashboardViewModel", "üîç Tipo do erro: ${e.javaClass.simpleName}")
                LogUtils.error("DashboardViewModel", "üìù Mensagem: ${e.message}")
                LogUtils.error("DashboardViewModel", "üìö Stack trace completo:", e)
                
                val errorMessage = when (e) {
                    is java.net.UnknownHostException -> {
                        LogUtils.error("DashboardViewModel", "üåê Problema de conectividade de rede")
                        "Sem conex√£o com a internet. Verifique sua conex√£o."
                    }
                    is java.net.ConnectException -> {
                        LogUtils.error("DashboardViewModel", "üîå Servidor indispon√≠vel")
                        "Servidor indispon√≠vel. Tente novamente em alguns instantes."
                    }
                    is java.net.SocketTimeoutException -> {
                        LogUtils.error("DashboardViewModel", "‚è∞ Timeout na requisi√ß√£o")
                        "Tempo limite excedido. Verifique sua conex√£o."
                    }
                    else -> {
                        LogUtils.error("DashboardViewModel", "‚ùì Erro gen√©rico ou desconhecido")
                        "Erro ao carregar estat√≠sticas: ${e.message ?: "Erro desconhecido"}"
                    }
                }
                
                LogUtils.debug("DashboardViewModel", "üì§ Atualizando estado para Error com mensagem: '$errorMessage'")
                _uiState.value = UiState.Error(errorMessage)
                
                LogUtils.error("DashboardViewModel", "‚ùå ========== CARREGAMENTO FALHOU ==========")
            }
        }
    }
    
    /**
     * Carrega ou recarrega os dados do dashboard.
     */
    fun refreshDashboard() {
        LogUtils.info("DashboardViewModel", "üîÑ ========== REFRESH SOLICITADO PELO USU√ÅRIO ==========")
        LogUtils.debug("DashboardViewModel", "üîÑ Usu√°rio fez pull-to-refresh ou clicou em atualizar")
        LogUtils.debug("DashboardViewModel", "üì• Iniciando novo carregamento...")
        loadDashboardStats()
    }
} 