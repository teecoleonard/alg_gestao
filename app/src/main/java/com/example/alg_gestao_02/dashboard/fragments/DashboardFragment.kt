package com.example.alg_gestao_02.dashboard.fragments

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import android.widget.Toast
import androidx.core.content.ContextCompat
import androidx.fragment.app.Fragment
import androidx.lifecycle.ViewModelProvider
import androidx.navigation.fragment.findNavController

import androidx.swiperefreshlayout.widget.SwipeRefreshLayout
import com.example.alg_gestao_02.R

import com.example.alg_gestao_02.dashboard.fragments.viewmodel.DashboardViewModel
import com.example.alg_gestao_02.data.models.DashboardStats
import com.example.alg_gestao_02.dashboard.fragments.viewmodel.DashboardViewModelFactory
import com.example.alg_gestao_02.ui.state.UiState
import com.example.alg_gestao_02.utils.LogUtils
import com.example.alg_gestao_02.utils.SessionManager
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

class DashboardFragment : Fragment() {
    
    private lateinit var viewModel: DashboardViewModel
    private lateinit var swipeRefresh: SwipeRefreshLayout
    
    // TextViews para exibir as contagens
    private lateinit var tvContratosCount: TextView
    private lateinit var tvClientesCount: TextView
    private lateinit var tvEquipamentosCount: TextView
    private lateinit var tvDevolucoesCount: TextView
    
    // TextViews para estat√≠sticas expandidas
    private lateinit var tvContratosExtras: TextView
    private lateinit var tvClientesExtras: TextView
    private lateinit var tvEquipamentosExtras: TextView
    private lateinit var tvDevolucoesExtras: TextView
    
    // Header elements
    private lateinit var tvCurrentDate: TextView
    

    
    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        return inflater.inflate(R.layout.fragment_dashboard, container, false)
    }
    
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        
        LogUtils.info("DashboardFragment", "üöÄ ========== DASHBOARD FRAGMENT INICIADO ==========")
        LogUtils.info("DashboardFragment", "üì± Fragment: ${this.javaClass.simpleName}")
        LogUtils.info("DashboardFragment", "üîß Vers√£o Android: ${android.os.Build.VERSION.SDK_INT}")
        LogUtils.info("DashboardFragment", "‚è∞ Timestamp: ${System.currentTimeMillis()}")
        
        // Inicializar views
        LogUtils.debug("DashboardFragment", "üé® Inicializando views...")
        initViews(view)
        
        // Configurar ViewModel
        LogUtils.debug("DashboardFragment", "üß† Configurando ViewModel...")
        setupViewModel()
        
        // Configurar listeners
        LogUtils.debug("DashboardFragment", "üëÇ Configurando listeners...")
        setupListeners(view)
        
        // Observar mudan√ßas no ViewModel
        LogUtils.debug("DashboardFragment", "üëÄ Configurando observadores...")
        observeViewModel()
        
        LogUtils.info("DashboardFragment", "‚úÖ Dashboard Fragment configurado com sucesso!")
    }
    
    private fun initViews(view: View) {
        swipeRefresh = view.findViewById(R.id.swipeRefresh)
        tvContratosCount = view.findViewById(R.id.tvWorkersCount)
        tvClientesCount = view.findViewById(R.id.tvTasksCount)
        tvEquipamentosCount = view.findViewById(R.id.tvEquipamentosCount)
        tvDevolucoesCount = view.findViewById(R.id.tvDevolucoesCount)
        
        // TextViews para estat√≠sticas expandidas
        tvContratosExtras = view.findViewById(R.id.tvContratosExtras)
        tvClientesExtras = view.findViewById(R.id.tvClientesExtras)
        tvEquipamentosExtras = view.findViewById(R.id.tvEquipamentosExtras)
        tvDevolucoesExtras = view.findViewById(R.id.tvDevolucoesExtras)
        
        // Header elements
        tvCurrentDate = view.findViewById(R.id.tvCurrentDate)
        
        // Setup current date
        setupCurrentDate()
    }
    
    private fun setupCurrentDate() {
        val currentDate = Date()
        val dateFormat = SimpleDateFormat("EEEE, dd 'de' MMMM", Locale("pt", "BR"))
        val formattedDate = dateFormat.format(currentDate)
        tvCurrentDate.text = formattedDate.replaceFirstChar { it.uppercase() }
    }
    

    
    private fun setupViewModel() {
        // ‚úÖ VERIFICA√á√ÉO DE DEBUG - CHECANDO SESS√ÉO E TOKEN
        val sessionManager = SessionManager(requireContext())
        LogUtils.info("DashboardFragment", "üîç ========== VERIFICANDO SESS√ÉO ==========")
        LogUtils.info("DashboardFragment", "üìã isLoggedIn: ${sessionManager.isLoggedIn()}")
        LogUtils.info("DashboardFragment", "üîë Token existe: ${!sessionManager.getToken().isNullOrEmpty()}")
        LogUtils.info("DashboardFragment", "üë§ User ID: ${sessionManager.getUserId()}")
        LogUtils.info("DashboardFragment", "üé≠ User Role: ${sessionManager.getUserRole()}")
        LogUtils.info("DashboardFragment", "üë®‚Äçüíº User Name: ${sessionManager.getUserName()}")
        LogUtils.info("DashboardFragment", "üìÑ User CPF: ${sessionManager.getUserCpf()}")
        
        if (sessionManager.getToken() != null) {
            val token = sessionManager.getToken()!!
            LogUtils.info("DashboardFragment", "üîê Token (primeiros 50 chars): ${token.take(50)}...")
            LogUtils.info("DashboardFragment", "üìè Tamanho do token: ${token.length} caracteres")
            LogUtils.info("DashboardFragment", "üîë TOKEN COMPLETO: $token")
        } else {
            LogUtils.error("DashboardFragment", "‚ùå TOKEN √â NULO!")
            LogUtils.error("DashboardFragment", "üö® PROBLEMA: Usu√°rio logado mas sem token!")
        }
        LogUtils.info("DashboardFragment", "üîç ======================================")
        // ‚úÖ FIM DA VERIFICA√á√ÉO

        val factory = DashboardViewModelFactory()
        viewModel = ViewModelProvider(this, factory)[DashboardViewModel::class.java]
    }
    
    private fun setupListeners(view: View) {
        // Configurar listener do SwipeRefreshLayout
        swipeRefresh.setOnRefreshListener {
            LogUtils.debug("DashboardFragment", "Atualizando dashboard via swipe refresh")
            viewModel.refreshDashboard()
        }
        

        
        // Bot√£o "ver todos" dos insights
        view.findViewById<View>(R.id.tvViewAll)?.setOnClickListener {
            LogUtils.debug("DashboardFragment", "Ver todos os insights clicado")
            Toast.makeText(context, "Ver todos os insights em desenvolvimento", Toast.LENGTH_SHORT).show()
        }
        
        // Card de Equipamentos
        view.findViewById<View>(R.id.cardEquipamentos)?.setOnClickListener {
            LogUtils.debug("DashboardFragment", "Card de equipamentos clicado")
            
            // Navegar para a p√°gina de equipamentos usando o NavController
            findNavController().navigate(R.id.equipamentosFragment)
            
            // Atualizar item selecionado no menu de navega√ß√£o
            try {
                requireActivity().findViewById<com.google.android.material.navigation.NavigationView>(R.id.navView)
                    .setCheckedItem(R.id.nav_equipamentos)
            } catch (e: Exception) {
                LogUtils.error("DashboardFragment", "Erro ao atualizar menu: ${e.message}")
            }
        }
        
        // Card de Contratos
        view.findViewById<View>(R.id.cardWorkers)?.setOnClickListener {
            LogUtils.debug("DashboardFragment", "Card de contratos clicado")
            
            // Navegar para a p√°gina de contratos usando o NavController
            findNavController().navigate(R.id.contratosFragment)
            
            // Atualizar item selecionado no menu de navega√ß√£o
            try {
                requireActivity().findViewById<com.google.android.material.navigation.NavigationView>(R.id.navView)
                    .setCheckedItem(R.id.nav_contratos)
            } catch (e: Exception) {
                LogUtils.error("DashboardFragment", "Erro ao atualizar menu: ${e.message}")
            }
        }
        
        // Card de Clientes
        view.findViewById<View>(R.id.cardTasks)?.setOnClickListener {
            LogUtils.debug("DashboardFragment", "Card de clientes clicado")
            
            // Navegar para a p√°gina de clientes usando o NavController
            findNavController().navigate(R.id.clientesFragment)
            
            // Atualizar item selecionado no menu de navega√ß√£o
            try {
                requireActivity().findViewById<com.google.android.material.navigation.NavigationView>(R.id.navView)
                    .setCheckedItem(R.id.nav_clientes)
            } catch (e: Exception) {
                LogUtils.error("DashboardFragment", "Erro ao atualizar menu: ${e.message}")
            }
        }
        
        // Card de Devolu√ß√µes
        view.findViewById<View>(R.id.cardDevolucoes)?.setOnClickListener {
            LogUtils.debug("DashboardFragment", "Card de devolu√ß√µes clicado")
            
            // Navegar para a p√°gina de devolu√ß√µes usando o NavController
            findNavController().navigate(R.id.devolucoesFragment)
            
            // Atualizar item selecionado no menu de navega√ß√£o
            try {
                requireActivity().findViewById<com.google.android.material.navigation.NavigationView>(R.id.navView)
                    .setCheckedItem(R.id.nav_devolucoes)
            } catch (e: Exception) {
                LogUtils.error("DashboardFragment", "Erro ao atualizar menu: ${e.message}")
            }
        }
    }
    
    private fun observeViewModel() {
        LogUtils.info("DashboardFragment", "üîó ========== INICIANDO OBSERVA√á√ÉO DO VIEWMODEL ==========")
        
        // Observar estado da UI
        viewModel.uiState.observe(viewLifecycleOwner) { state ->
            LogUtils.debug("DashboardFragment", "üîÑ Estado da UI alterado: ${state.javaClass.simpleName}")
            
            when (state) {
                is UiState.Loading -> {
                    LogUtils.info("DashboardFragment", "‚è≥ CARREGANDO dados do dashboard...")
                    LogUtils.debug("DashboardFragment", "üì± Mantendo indicador de carregamento vis√≠vel")
                }
                
                is UiState.Success -> {
                    LogUtils.info("DashboardFragment", "‚úÖ SUCESSO: Dados do dashboard carregados!")
                    swipeRefresh.isRefreshing = false
                    LogUtils.debug("DashboardFragment", "üîÑ SwipeRefresh desabilitado")
                    LogUtils.debug("DashboardFragment", "üìä Dados recebidos: ${state.data}")
                }
                
                is UiState.Error -> {
                    LogUtils.error("DashboardFragment", "‚ùå ERRO ao carregar dashboard:")
                    LogUtils.error("DashboardFragment", "üìù Mensagem de erro: ${state.message}")
                    swipeRefresh.isRefreshing = false
                    LogUtils.debug("DashboardFragment", "üîÑ SwipeRefresh desabilitado")
                    LogUtils.debug("DashboardFragment", "üö® Exibindo toast de erro para o usu√°rio")
                    Toast.makeText(context, state.message, Toast.LENGTH_SHORT).show()
                }
                
                else -> {
                    LogUtils.debug("DashboardFragment", "‚ùì Estado desconhecido: ${state}")
                    swipeRefresh.isRefreshing = false
                }
            }
        }
        
        // Observar estat√≠sticas do dashboard
        viewModel.dashboardStats.observe(viewLifecycleOwner) { stats ->
            if (stats != null) {
                LogUtils.info("DashboardFragment", "üìä ========== ATUALIZANDO INTERFACE COM NOVOS DADOS ==========")
                
                // Log dos dados b√°sicos recebidos
                LogUtils.info("DashboardFragment", "üìã DADOS B√ÅSICOS RECEBIDOS:")
                LogUtils.info("DashboardFragment", "   üìã Contratos: ${stats.contratos} (antes: ${tvContratosCount.text})")
                LogUtils.info("DashboardFragment", "   üë• Clientes: ${stats.clientes} (antes: ${tvClientesCount.text})")
                LogUtils.info("DashboardFragment", "   ‚öôÔ∏è Equipamentos: ${stats.equipamentos} (antes: ${tvEquipamentosCount.text})")
                LogUtils.info("DashboardFragment", "   üì¶ Devolu√ß√µes: ${stats.devolucoes} (antes: ${tvDevolucoesCount.text})")
                
                // Atualizar as contagens nos TextViews com logs individuais
                LogUtils.debug("DashboardFragment", "üîÑ Atualizando contador de contratos...")
                tvContratosCount.text = stats.contratos.toString()
                
                LogUtils.debug("DashboardFragment", "üîÑ Atualizando contador de clientes...")
                tvClientesCount.text = stats.clientes.toString()
                
                LogUtils.debug("DashboardFragment", "üîÑ Atualizando contador de equipamentos...")
                tvEquipamentosCount.text = stats.equipamentos.toString()
                
                LogUtils.debug("DashboardFragment", "üîÑ Atualizando contador de devolu√ß√µes...")
                tvDevolucoesCount.text = stats.devolucoes.toString()
                
                // Atualizar estat√≠sticas expandidas
                LogUtils.info("DashboardFragment", "üìà ATUALIZANDO ESTAT√çSTICAS DETALHADAS:")
                LogUtils.info("DashboardFragment", "   üìã Contratos esta semana: ${stats.contratosEstaSemana}")
                LogUtils.info("DashboardFragment", "   üë• Clientes hoje: ${stats.clientesHoje}")
                LogUtils.info("DashboardFragment", "   ‚öôÔ∏è Equipamentos dispon√≠veis: ${stats.equipamentosDisponiveis}")
                LogUtils.info("DashboardFragment", "   üì¶ Devolu√ß√µes pendentes: ${stats.devolucoesPendentes}")
                
                updateEstatisticasExpandidas(stats)
                

                
                // Log final de confirma√ß√£o
                LogUtils.info("DashboardFragment", "‚úÖ INTERFACE ATUALIZADA COM SUCESSO!")
                LogUtils.debug("DashboardFragment", "üì± Valores finais na UI:")
                LogUtils.debug("DashboardFragment", "   üìã tvContratosCount.text = '${tvContratosCount.text}'")
                LogUtils.debug("DashboardFragment", "   üë• tvClientesCount.text = '${tvClientesCount.text}'")
                LogUtils.debug("DashboardFragment", "   ‚öôÔ∏è tvEquipamentosCount.text = '${tvEquipamentosCount.text}'")
                LogUtils.debug("DashboardFragment", "   üì¶ tvDevolucoesCount.text = '${tvDevolucoesCount.text}'")
                
            } else {
                LogUtils.warning("DashboardFragment", "‚ö†Ô∏è Estat√≠sticas recebidas s√£o nulas")
                LogUtils.debug("DashboardFragment", "ü§î Isso pode acontecer durante o primeiro carregamento")
            }
        }
        
        LogUtils.info("DashboardFragment", "‚úÖ Observa√ß√£o do ViewModel configurada com sucesso")
    }
    
    /**
     * Atualiza as estat√≠sticas expandidas com dados din√¢micos
     */
    private fun updateEstatisticasExpandidas(stats: DashboardStats) {
        LogUtils.debug("DashboardFragment", "üîß Atualizando estat√≠sticas expandidas...")
        
        // Contratos esta semana
        val textContratosEstaSemana = if (stats.contratosEstaSemana > 0) {
            "${stats.contratosEstaSemana} novos esta semana"
        } else {
            "Nenhum novo esta semana"
        }
        tvContratosExtras.text = textContratosEstaSemana
        tvContratosExtras.setTextColor(
            if (stats.contratosEstaSemana > 0) 
                ContextCompat.getColor(requireContext(), R.color.success)
            else 
                ContextCompat.getColor(requireContext(), R.color.text_secondary)
        )
        LogUtils.debug("DashboardFragment", "   üìã Contratos: '$textContratosEstaSemana'")
        
        // Clientes hoje
        val textClientesHoje = if (stats.clientesHoje > 0) {
            "${stats.clientesHoje} cadastrados hoje"
        } else {
            "Nenhum cadastrado hoje"
        }
        tvClientesExtras.text = textClientesHoje
        tvClientesExtras.setTextColor(
            if (stats.clientesHoje > 0) 
                ContextCompat.getColor(requireContext(), R.color.success)
            else 
                ContextCompat.getColor(requireContext(), R.color.text_secondary)
        )
        LogUtils.debug("DashboardFragment", "   üë• Clientes: '$textClientesHoje'")
        
        // Equipamentos dispon√≠veis
        val textEquipamentosDisponiveis = "${stats.equipamentosDisponiveis} dispon√≠veis"
        tvEquipamentosExtras.text = textEquipamentosDisponiveis
        tvEquipamentosExtras.setTextColor(
            if (stats.equipamentosDisponiveis > 0) 
                ContextCompat.getColor(requireContext(), R.color.success)
            else 
                ContextCompat.getColor(requireContext(), R.color.warning)
        )
        LogUtils.debug("DashboardFragment", "   ‚öôÔ∏è Equipamentos: '$textEquipamentosDisponiveis'")
        
        // Devolu√ß√µes pendentes
        val textDevolucoesPendentes = if (stats.devolucoesPendentes > 0) {
            "${stats.devolucoesPendentes} pendentes"
        } else {
            "Nenhuma pendente"
        }
        tvDevolucoesExtras.text = textDevolucoesPendentes
        tvDevolucoesExtras.setTextColor(
            if (stats.devolucoesPendentes > 0) 
                ContextCompat.getColor(requireContext(), R.color.warning)
            else 
                ContextCompat.getColor(requireContext(), R.color.success)
        )
        LogUtils.debug("DashboardFragment", "   üì¶ Devolu√ß√µes: '$textDevolucoesPendentes'")
        
        LogUtils.info("DashboardFragment", "‚úÖ Estat√≠sticas expandidas atualizadas com sucesso!")
    }
} 